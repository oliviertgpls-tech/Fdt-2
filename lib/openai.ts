// lib/openai.ts - Configuration OpenAI
export class OpenAIService {
  private apiKey: string;
  private baseUrl = 'https://api.openai.com/v1';
  private formatSteps(stepsText: string): string {
  if (!stepsText) return '';
  
  // D√©couper par phrases qui commencent par √âtape ou chiffre
  return stepsText
    .replace(/(√âtape\s*\d+)/gi, '\\n\\n$1')
    .replace(/([.!?])\s*(√âtape|\d+\.)/g, '$1\\n\\n$2')
    .replace(/^\n\n/, '')
    .trim();
}
  
constructor() {
  // Essayer NEXT_PUBLIC d'abord (c√¥t√© client), puis c√¥t√© serveur
  this.apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY || process.env.OPENAI_API_KEY || '';
  
  // Ne pas throw d'erreur au chargement, juste logger
  if (!this.apiKey) {
    console.warn('‚ö†Ô∏è OpenAI API key non configur√©e - les fonctions IA seront d√©sactiv√©es');
  }
} 

  // üì∑ ANALYSE PHOTO DE PLAT ‚Üí RECETTE
   async analyzePhotoToRecipe(imageFile: File, firstName: string): Promise<{
    title: string;
    author: string;
    prepMinutes: number;
    servings: string;
    ingredients: string[];
    steps: string;
    confidence: number;
  }> {
    try {
      // V√©rifier la cl√© API    
      if (!this.apiKey) {
          throw new Error('Cl√© OpenAI non configur√©e. Ajoutez NEXT_PUBLIC_OPENAI_API_KEY dans vos variables d\'environnement.');
        }

      // Convertir l'image en base64
      const base64Image = await this.fileToBase64(imageFile);
      
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4-vision-preview",
          messages: [
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: `Analysez cette photo de plat et cr√©ez une recette compl√®te au format JSON.

INSTRUCTIONS :
- Identifiez le plat principal visible
- Estimez les ingr√©dients probables
- Proposez une m√©thode de pr√©paration r√©aliste
- Donnez un niveau de confiance (0-100)
- CRUCIAL : Dans le champ "steps",  NE PAS num√©roter les √©tapes, s√©parez OBLIGATOIREMENT chaque √©tape par le caract√®re de s√©paration |
- EXEMPLE steps valide : "Faire ceci|Faire cela|Finir"

FORMAT DE R√âPONSE (JSON uniquement) :
{
  "title": "Nom du plat",
  "author": "${firstName}",
  "prepMinutes": 30,
  "servings": "4 personnes",
  "ingredients": ["ingr√©dient 1", "ingr√©dient 2", ...],
  "steps": "Premi√®re √©tape|Deuxi√®me √©tape|Troisi√®me √©tape",
  "confidence": 85
}`
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:image/jpeg;base64,${base64Image}`,
                    detail: "high"
                  }
                }
              ]
            }
          ],
          max_tokens: 1000,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur API OpenAI: ${response.status}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error('Pas de r√©ponse de l\'IA');
      }

      // Parser la r√©ponse JSON
      const jsonMatch = content.match(/\{[\s\S]*\}/);

      const recipeData = JSON.parse(jsonMatch[0]);

      recipeData.steps = recipeData.steps.split('|').join('\n\n');

      // üéâ Transformation du tableau en une seule cha√Æne avec des doubles sauts de ligne
      if (Array.isArray(recipeData.steps)) {
        recipeData.steps = recipeData.steps.join('\n\n');
      }

      return recipeData;
      
    } catch (error) {
      console.error('Erreur analyse photo:', error);
      throw new Error('Impossible d\'analyser cette image');
    }
  }

  // üìù ANALYSE RECETTE MANUSCRITE ‚Üí RECETTE STRUCTUR√âE
  async analyzeManuscriptToRecipe(imageFile: File, firstName: string): Promise<{
    title: string;
    author: string;
    prepMinutes: number;
    servings: string;
    ingredients: string[];
    steps: string;
    confidence: number;
  }> {
    try {

   if (!this.apiKey) {
      throw new Error('Cl√© OpenAI non configur√©e. Ajoutez NEXT_PUBLIC_OPENAI_API_KEY dans vos variables d\'environnement.');
    }

      const base64Image = await this.fileToBase64(imageFile);
      
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4-vision-preview",
          messages: [
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: `Lisez cette recette manuscrite et structurez-la au format JSON.

INSTRUCTIONS :
- Lisez tout le texte visible (titre, ingr√©dients, √©tapes)
- Extrayez et structurez les informations
- Corrigez l'orthographe si n√©cessaire
- Estimez temps et portions si non mentionn√©s
- CRUCIAL : Dans le champ "steps",  NE PAS num√©roter les √©tapes, s√©parez OBLIGATOIREMENT chaque √©tape par le caract√®re de s√©paration |
- EXEMPLE steps valide : "Faire ceci|Faire cela|Finir"

FORMAT DE R√âPONSE (JSON uniquement) :
{
  "title": "Titre de la recette",
  "author": "${firstName}",
  "prepMinutes": 30,
  "servings": "4 personnes",
  "ingredients": ["ingr√©dient 1", "ingr√©dient 2", ...],
  "steps": "Premi√®re √©tape|Deuxi√®me √©tape|Troisi√®me √©tape",
  "confidence": 90
}`
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:image/jpeg;base64,${base64Image}`,
                    detail: "high"
                  }
                }
              ]
            }
          ],
          max_tokens: 1200,
          temperature: 0.3
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur API OpenAI: ${response.status}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error('Pas de r√©ponse de l\'IA');
      }

      // Parser la r√©ponse JSON
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Format de r√©ponse invalide');
      }

      const recipeData = JSON.parse(jsonMatch[0]);

      recipeData.steps = recipeData.steps.split('|').join('\n\n');

      return recipeData;
      
    } catch (error) {
      console.error('Erreur analyse manuscrit:', error);
      throw new Error('Impossible de lire cette recette manuscrite');
    }
  }

  // üõ†Ô∏è HELPER : Convertir File en base64
  private fileToBase64(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = reader.result as string;
        // Enlever le pr√©fixe "data:image/...;base64,"
        const base64Data = base64.split(',')[1];
        resolve(base64Data);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  // üßπ D√âDUPLICATION INTELLIGENTE DES INGR√âDIENTS
  async deduplicateIngredients(ingredients: string[]): Promise<string[]> {
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è Pas de cl√© OpenAI, d√©duplication basique seulement');
      return Array.from(new Set(ingredients));
    }

    if (ingredients.length <= 1) {
      return ingredients;
    }

    try {
      console.log('üßπ D√©duplication intelligente de', ingredients.length, 'ingr√©dients...');
      
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "user",
              content: `Voici une liste d'ingr√©dients qui peut contenir des doublons s√©mantiques.

LISTE :
${ingredients.map((ing, i) => `${i + 1}. ${ing}`).join('\n')}

R√àGLES DE D√âDUPLICATION :
- Si 2 ingr√©dients d√©signent la m√™me chose (ex: "200g de farine" et "farine"), ne garde QUE le plus pr√©cis
- Si un ingr√©dient est une variante d'un autre (ex: "une botte de coriandre" et "coriandre"), ne garde QUE la version compl√®te
- Respecte l'ordre de priorit√© : les versions avec quantit√©s sont meilleures que celles sans

RETOURNE UN JSON avec seulement la liste nettoy√©e :
{
  "ingredients": ["ingr√©dient 1", "ingr√©dient 2", ...]
}`
            }
          ],
          max_tokens: 500,
          temperature: 0.3
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur API: ${response.status}`);
      }

      const data = await response.json();
      const content = data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error('Pas de r√©ponse');
      }

      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Format invalide');
      }

      const result = JSON.parse(jsonMatch[0]);
      console.log('‚úÖ D√©duplication : de', ingredients.length, '√†', result.ingredients.length, 'ingr√©dients');
      
      return result.ingredients;
      
    } catch (error) {
      console.error('‚ùå Erreur d√©duplication, fallback sur d√©duplication basique:', error);
      return Array.from(new Set(ingredients));
    }
  }
} // ‚Üê Fermeture de la classe OpenAIService

// Instance singleton
export const openAIService = new OpenAIService();