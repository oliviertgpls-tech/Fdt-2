// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  ingredients String[] // Array of strings
  steps       String   // Text with line breaks
  author      String?
  prepMinutes Int?
  servings    String?
  tags        String[] // Array of strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  isFromExternalUrl Boolean  @default(false) 
  
  // Relations
  notebookRecipes NotebookRecipe[]
  bookRecipes     BookRecipe[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notebook {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  
  // Relations
  recipes NotebookRecipe[]
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotebookRecipe {
  id         String   @id @default(cuid())
  notebookId String
  recipeId   String
  position   Int      // For ordering
  
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([notebookId, recipeId])
}

model Book {
  id            String   @id @default(cuid())
  title         String
  description   String?
  coverImageUrl String?  // Photo de couverture d√©di√©e
  status        String   @default("draft") // draft, ready, ordered, printed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  
  // Relations
  recipes BookRecipe[]
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BookRecipe {
  id       String @id @default(cuid())
  bookId   String
  recipeId String
  position Int    // For ordering
  
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([bookId, recipeId])
}

// üîê Tables NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Relations avec tes tables
  recipes       Recipe[]
  notebooks     Notebook[]
  books         Book[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
