import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { imageBase64, firstName, mode } = await request.json();
    
    const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY || process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      return NextResponse.json({ error: 'Cl√© OpenAI manquante' }, { status: 500 });
    }

    const prompt = mode === 'manuscript' 
      ? `Tu es un expert en OCR de recettes. Tu dois extraire TOUT le texte visible d'une recette manuscrite ou imprim√©e.

üéØ OBJECTIF : Extraire le contenu COMPLET, mot pour mot, sans r√©sumer ni raccourcir.

üìù R√àGLES STRICTES pour les "steps" :
1. Extrais CHAQUE √©tape avec son texte INT√âGRAL (pas juste le titre !)
2. Si une √©tape dit "Pr√©chauffer le four √† 180¬∞C et beurrer le moule", tu dois garder TOUTE cette phrase
3. S√©pare les √©tapes par le caract√®re | (pipe)
4. NE r√©sume JAMAIS, NE raccourcis JAMAIS
5. Si tu vois "√âtape 1 : M√©langer...", extrais "M√©langer..." (sans le num√©ro et sans le mot "√©tape")
6. Si tu vois des encadr√©s annexes type "Astuce" "Le saviez-vous?" "Tour de main" "Conseils" ajoute-les en derni√®res √©tape en indiquant "BONUS -" au d√©but du texte de la derni√®re √©tape.
7. Si tu vois qu'il ne s'agit absoluement pas d'une photo de plat renvoie une erreur et ne permet pas d'aller √† l'√©tape cr√©ation


‚úÖ EXEMPLE CORRECT :
"steps": "Pr√©chauffer le four √† 180¬∞C et beurrer un moule √† cake|M√©langer la farine, le sucre et le beurre ramolli dans un saladier|Ajouter les ≈ìufs un par un en m√©langeant bien|Verser dans le moule et cuire 45 minutes"

‚ùå EXEMPLE INCORRECT (trop court) :
"steps": "Pr√©chauffer le four|M√©langer les ingr√©dients|Ajouter les ≈ìufs|Cuire"

FORMAT JSON STRICT :
{
  "title": "Titre exact de la recette",
  "author": "${firstName}",
  "prepMinutes": 30,
  "servings": "4",
  "ingredients": ["ingr√©dient 1 avec quantit√©", "ingr√©dient 2 avec quantit√©"],
  "steps": "Texte complet √©tape 1|Texte complet √©tape 2|Texte complet √©tape 3",
  "confidence": 85
}`
      : `Tu es un chef cuisinier expert qui analyse des photos de plats pour cr√©er des recettes d√©taill√©es.

üéØ OBJECTIF : Deviner la recette compl√®te √† partir de la photo du plat fini.

üì∏ ANALYSE VISUELLE :
1. Identifie le plat principal (lasagnes, g√¢teau au chocolat, poulet r√¥ti, etc.)
2. Rep√®re tous les ingr√©dients VISIBLES (l√©gumes, viande, sauce, garniture, etc.)
3. Devine les ingr√©dients CACH√âS logiques pour ce type de plat (farine pour un g√¢teau, bouillon pour une soupe, etc.)
4. Estime la m√©thode de cuisson (four, po√™le, mijoteuse, etc.)

üìù R√àGLES STRICTES pour les "steps" :
1. Propose des √©tapes D√âTAILL√âES et COMPL√àTES (pas juste "M√©langer les ingr√©dients")
2. Chaque √©tape doit √™tre une phrase compl√®te avec des d√©tails pratiques
3. S√©pare les √©tapes par le caract√®re | (pipe)
4. Inclus les temp√©ratures, temps de cuisson, et techniques pr√©cises
5. Pense comme un vrai chef : donne des conseils simples et utiles

‚úÖ EXEMPLE CORRECT (lasagnes) :
"steps": "Pr√©chauffer le four √† 180¬∞C|Dans une grande po√™le, faire revenir la viande hach√©e avec l'oignon √©minc√© pendant 8 minutes jusqu'√† coloration|Ajouter la sauce tomate, l'ail, le basilic et laisser mijoter 15 minutes √† feu doux|Dans un plat √† gratin, alterner couches de p√¢tes, viande, b√©chamel et parmesan r√¢p√©|Terminer par une couche de b√©chamel et de fromage|Enfourner 35-40 minutes jusqu'√† obtenir une belle cro√ªte dor√©e"

‚ùå EXEMPLE INCORRECT (trop court) :
"steps": "Pr√©chauffer le four|Cuire la viande|Assembler les couches|Enfourner"

üé≤ CONFIDENCE :
- 90-100 : Plat tr√®s reconnaissable (pizza margherita, cr√™pes, etc.)
- 80-89 : Plat identifiable mais variations possibles (curry, gratin, etc.)
- 60-79 : Plusieurs interpr√©tations possibles
- 0-59 : Photo floue ou plat non identifiable

FORMAT JSON STRICT :
{
  "title": "Nom pr√©cis du plat",
  "author": "${firstName}",
  "prepMinutes": 30,
  "servings": "4",
  "ingredients": ["200g de farine", "3 ≈ìufs", "100ml de lait", "1 pinc√©e de sel"],
  "steps": "√âtape d√©taill√©e 1|√âtape d√©taill√©e 2|√âtape d√©taill√©e 3|√âtape d√©taill√©e 4",
  "confidence": 85
}`;

    // ‚úÖ APPEL √Ä L'API OPENAI
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [{
          role: "user",
          content: [
            { type: "text", text: prompt },
            { 
              type: "image_url", 
              image_url: { 
                url: `data:image/jpeg;base64,${imageBase64}`, 
                detail: "high" 
              }
            }
          ]
        }],
        max_tokens: mode === 'manuscript' ? 2500 : 1000,
        temperature: mode === 'manuscript' ? 0.3 : 0.7
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Erreur OpenAI:', error);
      return NextResponse.json({ error: 'Erreur OpenAI' }, { status: response.status });
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    const result = JSON.parse(jsonMatch[0]);
    
    return NextResponse.json(result);
    
  } catch (error: any) {
    console.error('Erreur:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}